{%- macro direction(dir) -%}
  {%- if dir -%}
    {%- if dir == "E" -%}
    zrk::DirectionType::East
    {%- elif dir == "S" -%}
    zrk::DirectionType::South
    {%- elif dir == "W" -%}
    zrk::DirectionType::West
    {%- elif dir == "N" -%}
    zrk::DirectionType::North
    {%- else -%}UNKNOWN DIRECTION
    {%- endif -%}
  {%- else -%}
  zrk::DirectionType::None
  {%- endif -%}
{%- endmacro direction -%}
{%- macro objectType(t) -%}
  {%- if t == "path" -%}
  zrk::ObjectType::Path
  {%- elif t == "window" -%}
  zrk::ObjectType::Window
  {%- elif t == "ball" -%}
  zrk::ObjectType::Ball
  {%- elif t == "door" -%}
  zrk::ObjectType::Door
  {%- else -%}UNKNOWN OBJECT TYPE{%- endif -%}
{%- endmacro objectType -%}
{%- macro actionType(t) -%}
  {%- if t == "open" -%}
  zrk::ActionType::Open
  {%- elif t == "kick" -%}
  zrk::ActionType::Kick
  {%- elif t == "break" -%}
  zrk::ActionType::Break
  {%- else -%}UNKNOWN ACTION TYPE{%- endif -%}
{%- endmacro actionType -%}
{%- macro materialType(m) -%}
  {%- if m == "dirt" -%}
  zrk::MaterialType::Dirt
  {%- elif m == "glass" -%}
  zrk::MaterialType::Glass
  {%- elif m == "leather" -%}
  zrk::MaterialType::Leather
  {%- elif m == "wood" -%}
  zrk::MaterialType::Wood
  {%- else -%}UNKNOWN MATERIAL TYPE{%- endif -%}
{%- endmacro materialType -%}
{%- macro roomType(r) -%}
  {%- if r == "plain" -%}
  zrk::RoomType::Plain
  {%- elif r == "mountains" -%}
  zrk::RoomType::Mountains
  {%- elif r == "barn" -%}
  zrk::RoomType::Barn
  {%- else -%}UNKNOWN ROOM TYPE{%- endif -%}
{%- endmacro roomType -%}

#[dojo::interface]
trait ISpawner<T> {
    fn setup(ref world: IWorldDispatcher);
}

#[dojo::contract]
pub mod spawner {
    use core::byte_array::ByteArrayTrait;
    use core::array::ArrayTrait;
    use core::option::OptionTrait;
    use super::ISpawner;

    use the_oruggin_trail::models::{
        zrk_enums as zrk, txtdef::{Txtdef}, action::{Action}, object::{Object}, room::{Room}
    };

    use the_oruggin_trail::constants::zrk_constants as zc;
    use the_oruggin_trail::constants::zrk_constants::{roomid as rm, statusid as st};

    use the_oruggin_trail::lib::hash_utils::hashutils as h_util;


    #[abi(embed_v0)]
    impl SpawnerImpl of ISpawner<ContractState> {
        fn setup(ref world: IWorldDispatcher) {
            make_rooms(world, 23);
        }
    }

    fn store_objects(w: IWorldDispatcher, t: Array<Object>) {
        let mut i = 0;
        while i < t.len() {
            let a: Object = t.at(i).clone();
            set!(w, (a));
            i += 1 + i;
        }
    }

    fn store_actions(w: IWorldDispatcher, t: Array<Action>) {
        let mut i = 0;
        while i < t.len() {
            let a: Action = t.at(i).clone();
            set!(w, (a));
            i += 1 + i;
        }
    }

    fn store_places(w: IWorldDispatcher, t: Array<Room>) {
        let mut i = 0;
        while i < t.len() {
            let a: Room = t.at(i).clone();
            set!(w, (a));
            i += 1 + i;
        }
    }

    fn store_txt(world: IWorldDispatcher, id: felt252, ownedBy: felt252, val: ByteArray) {
        set!(world, (Txtdef { id: id, owner: ownedBy, text: val },));
    }

    // --------------------------------------------------------------------------------------------
    // GENERATED
    // --------------------------------------------------------------------------------------------

    fn make_rooms(w: IWorldDispatcher, pl: felt252) {
    {%- for room in levels[0].rooms %}
        // {{room.roomName}}
        let _  = gen_room_{{room.roomID}}(w, pl);
    {%- endfor %}
    }

    {% for room in levels[0].rooms %}
    // {{loop.index}}. {{room.roomName}}: {{room.roomDescription | linebreaks(to="\n") }}
    fn gen_room_{{room.roomID}}(w: IWorldDispatcher, playerid: felt252) {
      
        {%- if room.objects -%}
        {%- for object in room.objects -%}
        // object {{object.objID}}
        
        {%- if object.actions -%}
        {%- for action in object.actions -%}

        // action {{action.actionID}}
        let mut action_{{object.objID}}_{{action.actionID}} = Action{
            actionId: st::NONE, 
            actionType: {{ self::actionType(t=action.type) | trim }},  
            dBitTxt: "{{action.dBitText}}", enabled: {{action.enabled}}, 
            revertable: {{action.revertable}}, dBit: {{action.dBit}}, 
            affectsActionId: 0, // TODO 
            affectedByActionId: 0 // TODO : remove ?
        };
        
        let action_id_{{object.objID}}_{{action.actionID}} = h_util::action_hash(@action_{{object.objID}}_{{action.actionID}} );
        action_{{object.objID}}_{{action.actionID}}.actionId = action_id_{{object.objID}}_{{action.actionID}};
        
        {% endfor -%}
        store_actions(w, array![{%- for action in object.actions -%}action_{{object.objID}}_{{action.actionID}},{%- endfor -%} ]);
        {% endif -%}
        

        {%if object.destination -%}
        let mut object_{{object.objID}} = Object{
            objectId: st::SETME, 
            objType: {{ self::objectType(t=object.type) | trim }},
            matType: {{ self::materialType(m=object.material) | trim }},
            dirType: {{ self::direction(dir=object.direction) | trim }},
            destId: st::NONE,
            objectActionIds: array![{%- for action in object.actions -%}action_id_{{object.objID}}_{{action.actionID}},{%- endfor -%}],
            txtDefId: st::SETME 
        };
        {%- else -%}
        let destination = "{{object.destination}}";
        let mut object_{{object.objID}} = Object{
            objectId: st::SETME, 
            objType: {{ self::objectType(t=object.type) | trim }},
            matType: {{ self::materialType(m=object.material) | trim }},
            dirType: {{ self::direction(dir=object.direction) | trim }},
            destId: h_util::str_hash(@destination),
            objectActionIds: array![{%- for action in object.actions -%}action_id_{{object.objID}}_{{action.actionID}},{%- endfor -%}],
            txtDefId: st::SETME 
        };
        {%- endif %}

        let object_id_{{object.objID}} = h_util::obj_hash(@object_{{object.objID}}); 
        object_{{object.objID}}.objectId = object_id_{{object.objID}};
        let object_desc: ByteArray = "{{ object.objDescription | linebreaks }}";
        let td_id_b = h_util::str_hash(@object_desc);
        object_{{object.objID}}.txtDefId = td_id_b;

        store_txt(w, td_id_b, object_id_{{object.objID}}, object_desc);
        
        {% endfor -%}
        store_objects(w, array![{%- for object in room.objects -%}object_{{object.objID}},{%- endfor -%}]);
        {%- endif %}
        
        // now store a room with all its shizzle
        let room_desc: ByteArray = "{{ room.roomDescription | linebreaks }}";
        let _txt_id = h_util::str_hash(@room_desc);
        let place_name: ByteArray = "{{room.roomName}}";
        let rmid = h_util::str_hash(@place_name);

        let mut place = Room{
            roomId: rmid,
            roomType: {{ self::roomType(r=room.roomType) | trim }},
            txtDefId: _txt_id,
            shortTxt: place_name,
            objectIds: array![{%- for id in room.objectIds -%}object_id_{{id}},{%- endfor -%}],
            dirObjIds: array![{%- for id in room.dirObjIds -%}object_id_{{id}},{%- endfor -%}],
            players: array![]
        };

        // set main description text in world store
        // for the place/area/room
        store_txt(w, _txt_id, rmid, room_desc);
        store_places(w, array![place]);
        
    }
    {%- endfor -%}
}
